<template>
  <div class="home">
    <b-container class="bv-example-row">
      <b-row align-v="center">
        <!-- <Card
        title="The Flower hill"
        imgsrc="https://picsum.photos/600/300/?image=25"
        alt="tree branches"
        img-top
        tag="article"
        styles="max-width:20rem"
        classe="mb-2"
        cardtext="What are flowers anyway? How can you threat them nice? Read
            more"
        buttontext="Apply"
        headers="Flower hill"
      />
       -->
        <Card
          v-for="web in displayWebsites"
          :key="web.id"
          :title="web.title"
          :imgsrc="web.imgsrc"
          :alt="web.alt"
          :tag="web.tag"
          :styles="web.styles"
          :classe="web.classe"
          :cardtext="web.cardtext"
          :buttontext="web.buttontext"
          :headers="web.headers"
        />
      </b-row>
      <b-pagination
        v-model="currentPage"
        :total-rows="rows"
        :per-page="perPage"
        first-text="First"
        prev-text="Prev"
        next-text="Next"
        last-text="Last"
        @input="paginate(currentPage)"
      />
    </b-container>
  </div>
</template>

<script>
import Card from "@/components/Card";
import { mapGetters } from "vuex";

export default {
  name: "home",
  components: { Card },
  computed: {
    ...mapGetters(["getWebsites", "getDisplayWebsites", "getRows"])
  },
  mounted() {
    // Lettere å teste metoder ved å kalle dem slik.
    this.fetchData();
  },
  data() {
    return {
      websites: [],
      displayWebsites: [],
      currentPage: 1,
      rows: 1,
      perPage: 3
    };
  },
  methods: {
    async fetchData() {
      await this.$store.dispatch("fetchWebsites");
      console.log("test", this.$store.getters.websites);
      // const response = await fetch("webs.json");
      // const value = await response.json();
      // this.websites = value;
      // this.displayWebsites = value.slice(0, 3);
      // console.log(value);
      // this.displayWebsites = this.websites.slice(0, 3);
      // this.websites = this.getWebsites;
      // this.rows = this.websites.length;
      console.log(this.websites);
    },
    paginate(currentPage) {
      this.$store.dispatch("paginate", { currentPage, perPage: this.perPage });
      //   const start = (currentPage - 1) * this.perPage;
      //   this.displayWebsites = this.websites.slice(start, start + 3);
    }
  }
};
</script>
